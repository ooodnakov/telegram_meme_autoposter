[project]
name = "telegram_meme_autoposter"
version = "0.1.0"
requires-python = "==3.12.*"

# Core dependencies
dependencies = [
    "anyio==4.6.2.post1",
    "apscheduler==3.11.0",
    "asyncio>=3.4.3",
    "certifi==2024.8.30",
    "charset-normalizer==3.4.0",
    "exceptiongroup==1.2.2",
    "h11==0.14.0",
    "httpcore==1.0.7",
    "httpx==0.28.0",
    "idna==3.10",
    "loguru==0.7.3",
    "piexif==1.1.3",
    "pillow==11.0.0",
    "pip>=25.2",
    "pyaes==1.6.1",
    "pyasn1==0.6.1",
    "pygments>=2.19.2",
    "pymysql==1.1.1",
    "python-telegram-bot[job-queue]==22.3",
    "requests==2.32.3",
    "rsa==4.9",
    "sniffio==1.3.1",
    "sqlalchemy==2.0.41",
    "telethon==1.38.1",
    "typing-extensions==4.12.2",
    "tzlocal==5.3.1",
    "urllib3==2.2.3",
    "valkey==6.1.0",
    "imagehash==4.3.1",
    "watchfiles",
    "pytest-mock>=3.14.1",
    "minio-async>=1.0.1",
]

[dependency-groups]
dev = [
    "pytest>=8.2.2",
    "pytest-asyncio==0.23.6",
    "pytest-xdist>=3.5.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "fakeredis>=2.30.1",
    "ruff>=0.11.13",
    "mypy>=1.17.0",
]



[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "--tb=short --strict-markers"
testpaths = ["test"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as asyncio",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "% (asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.ruff]

src = ["telegram_auto_poster", "test"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
]

include = ["pyproject.toml", "telegram_auto_poster/*"]
# Same as Black.
line-length = 88
indent-width = 4

fix = true
unsafe-fixes = true
show-fixes = true

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
